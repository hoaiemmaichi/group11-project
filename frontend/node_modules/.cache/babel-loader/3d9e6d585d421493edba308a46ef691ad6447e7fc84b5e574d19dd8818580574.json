{"ast":null,"code":"import axios from 'axios';\nconst API = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n// Request interceptor: add Authorization header from localStorage if missing\naxios.interceptors.request.use(config => {\n  try {\n    var _config$headers;\n    const token = localStorage.getItem('token');\n    if (token && !((_config$headers = config.headers) !== null && _config$headers !== void 0 && _config$headers.Authorization)) {\n      config.headers = config.headers || {};\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  } catch (e) {}\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor: on 401 clear auth and redirect to login\naxios.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    // Clear authentication data\n    try {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('currentUser');\n    } catch (_) {}\n\n    // Redirect to login page\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"names":["axios","API","process","env","REACT_APP_API_URL","interceptors","request","use","config","_config$headers","token","localStorage","getItem","headers","Authorization","e","error","Promise","reject","response","status","removeItem","_","window","location","href"],"sources":["/Users/lebao/Documents/TH_MNM/group11-project-frontend/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n// Request interceptor: add Authorization header from localStorage if missing\naxios.interceptors.request.use((config) => {\n  try {\n    const token = localStorage.getItem('token');\n    if (token && !config.headers?.Authorization) {\n      config.headers = config.headers || {};\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  } catch (e) {}\n  return config;\n}, (error) => Promise.reject(error));\n\n// Response interceptor: on 401 clear auth and redirect to login\naxios.interceptors.response.use(response => response, async (error) => {\n  if (error.response && error.response.status === 401) {\n    // Clear authentication data\n    try { \n      localStorage.removeItem('token'); \n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('currentUser'); \n    } catch(_){}\n    \n    // Redirect to login page\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\nexport default axios;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAEpE;AACAJ,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACzC,IAAI;IAAA,IAAAC,eAAA;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,IAAI,GAAAD,eAAA,GAACD,MAAM,CAACK,OAAO,cAAAJ,eAAA,eAAdA,eAAA,CAAgBK,aAAa,GAAE;MAC3CN,MAAM,CAACK,OAAO,GAAGL,MAAM,CAACK,OAAO,IAAI,CAAC,CAAC;MACrCL,MAAM,CAACK,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;IAClD;EACF,CAAC,CAAC,OAAOK,CAAC,EAAE,CAAC;EACb,OAAOP,MAAM;AACf,CAAC,EAAGQ,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;;AAEpC;AACAhB,KAAK,CAACK,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAACY,QAAQ,IAAIA,QAAQ,EAAE,MAAOH,KAAK,IAAK;EACrE,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACA,IAAI;MACFT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;MAChCV,YAAY,CAACU,UAAU,CAAC,cAAc,CAAC;MACvCV,YAAY,CAACU,UAAU,CAAC,aAAa,CAAC;IACxC,CAAC,CAAC,OAAMC,CAAC,EAAC,CAAC;;IAEX;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAehB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}